using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.IO;
using System.Text;
using Xunit;

namespace BencodeLib.Test {

    public class BencodeReaderTest {

        [Fact]
        [SuppressMessage("ReSharper", "PossibleNullReferenceException")]
        public void Read_ValidSimpleDictionary() {

            const string simpleDict = "d3:key5:value6:numKeyi42e4:listli10ei-1234e4:testee";

            var reader = new BencodeReader(Encoding.ASCII.GetBytes(simpleDict));

            var dict = reader.Read() as BencodeDictionary;

            Assert.NotNull(dict);

            Assert.Equal(3, dict.Count);
            Assert.True(dict.ContainsKey("key"));
            Assert.True(dict.ContainsKey("numKey"));
            Assert.True(dict.ContainsKey("list"));
            Assert.Equal("value", dict["key"] as BencodeByteString);
            Assert.Equal(42, dict["numKey"] as BencodeInteger);
            Assert.Equal(3, (dict["list"] as BencodeList).Count);
        }

        [Fact]
        public void Read_InvalidDictionaryEnd() {
            // This dictionary is missing the closing 'e'
            const string test = "d3:key5:value";

            var reader = new BencodeReader(Encoding.ASCII.GetBytes(test));

            Assert.Throws(typeof(InvalidDataException), () => reader.Read());
        }

        [Fact]
        public void Read_InvalidListEnd() {
            const string test = "li1ei2ei3e";

            var reader = new BencodeReader(Encoding.ASCII.GetBytes(test));

            Assert.Throws(typeof(InvalidDataException), () => reader.Read());
        }

        [Fact]
        public void Read_ValidInteger() {
            const string test = "i123456e";

            var reader = new BencodeReader(Encoding.ASCII.GetBytes(test));
            var item = reader.Read();

            Assert.IsType<BencodeInteger>(item);

            var num = item as BencodeInteger;

            Assert.Equal(123456, num);
        }

        [Fact]
        public void Read_ValidNegativeInteger() {
            const string test = "i-432e";

            var reader = new BencodeReader(Encoding.ASCII.GetBytes(test));
            var item = reader.Read();

            Assert.IsType<BencodeInteger>(item);

            var num = item as BencodeInteger;

            Assert.Equal(-432, num);
        }

        [Fact]
        public void Read_InvalidInteger() {
            const string test = "iabce";

            var reader = new BencodeReader(Encoding.ASCII.GetBytes(test));
            Assert.Throws(typeof(FormatException), () => reader.Read());
        }

        [Fact]
        public void Read_ValidWholeFile() {
            byte[] rawData = {
                0x64, 0x38, 0x3A, 0x61, 0x6E, 0x6E, 0x6F, 0x75, 0x6E, 0x63, 0x65, 0x33,
                0x36, 0x3A, 0x68, 0x74, 0x74, 0x70, 0x3A, 0x2F, 0x2F, 0x62, 0x74, 0x31,
                0x2E, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2E, 0x6F, 0x72, 0x67,
                0x3A, 0x36, 0x39, 0x36, 0x39, 0x2F, 0x61, 0x6E, 0x6E, 0x6F, 0x75, 0x6E,
                0x63, 0x65, 0x31, 0x33, 0x3A, 0x61, 0x6E, 0x6E, 0x6F, 0x75, 0x6E, 0x63,
                0x65, 0x2D, 0x6C, 0x69, 0x73, 0x74, 0x6C, 0x6C, 0x33, 0x36, 0x3A, 0x68,
                0x74, 0x74, 0x70, 0x3A, 0x2F, 0x2F, 0x62, 0x74, 0x31, 0x2E, 0x61, 0x72,
                0x63, 0x68, 0x69, 0x76, 0x65, 0x2E, 0x6F, 0x72, 0x67, 0x3A, 0x36, 0x39,
                0x36, 0x39, 0x2F, 0x61, 0x6E, 0x6E, 0x6F, 0x75, 0x6E, 0x63, 0x65, 0x65,
                0x6C, 0x33, 0x36, 0x3A, 0x68, 0x74, 0x74, 0x70, 0x3A, 0x2F, 0x2F, 0x62,
                0x74, 0x32, 0x2E, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2E, 0x6F,
                0x72, 0x67, 0x3A, 0x36, 0x39, 0x36, 0x39, 0x2F, 0x61, 0x6E, 0x6E, 0x6F,
                0x75, 0x6E, 0x63, 0x65, 0x65, 0x65, 0x37, 0x3A, 0x63, 0x6F, 0x6D, 0x6D,
                0x65, 0x6E, 0x74, 0x37, 0x30, 0x32, 0x3A, 0x54, 0x68, 0x69, 0x73, 0x20,
                0x63, 0x6F, 0x6E, 0x74, 0x65, 0x6E, 0x74, 0x20, 0x68, 0x6F, 0x73, 0x74,
                0x65, 0x64, 0x20, 0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x49, 0x6E,
                0x74, 0x65, 0x72, 0x6E, 0x65, 0x74, 0x20, 0x41, 0x72, 0x63, 0x68, 0x69,
                0x76, 0x65, 0x20, 0x61, 0x74, 0x20, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3A,
                0x2F, 0x2F, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2E, 0x6F, 0x72,
                0x67, 0x2F, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6C, 0x73, 0x2F, 0x41, 0x64,
                0x43, 0x6F, 0x75, 0x6E, 0x63, 0x69, 0x6C, 0x2D, 0x41, 0x64, 0x6F, 0x70,
                0x74, 0x69, 0x6F, 0x6E, 0x2D, 0x44, 0x61, 0x6E, 0x67, 0x65, 0x72, 0x44,
                0x61, 0x64, 0x2D, 0x33, 0x30, 0x5F, 0x43, 0x4C, 0x53, 0x44, 0x0A, 0x46,
                0x69, 0x6C, 0x65, 0x73, 0x20, 0x6D, 0x61, 0x79, 0x20, 0x68, 0x61, 0x76,
                0x65, 0x20, 0x63, 0x68, 0x61, 0x6E, 0x67, 0x65, 0x64, 0x2C, 0x20, 0x77,
                0x68, 0x69, 0x63, 0x68, 0x20, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6E, 0x74,
                0x73, 0x20, 0x74, 0x6F, 0x72, 0x72, 0x65, 0x6E, 0x74, 0x73, 0x20, 0x66,
                0x72, 0x6F, 0x6D, 0x20, 0x64, 0x6F, 0x77, 0x6E, 0x6C, 0x6F, 0x61, 0x64,
                0x69, 0x6E, 0x67, 0x20, 0x63, 0x6F, 0x72, 0x72, 0x65, 0x63, 0x74, 0x6C,
                0x79, 0x20, 0x6F, 0x72, 0x20, 0x63, 0x6F, 0x6D, 0x70, 0x6C, 0x65, 0x74,
                0x65, 0x6C, 0x79, 0x3B, 0x20, 0x70, 0x6C, 0x65, 0x61, 0x73, 0x65, 0x20,
                0x63, 0x68, 0x65, 0x63, 0x6B, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x61, 0x6E,
                0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6F, 0x72,
                0x72, 0x65, 0x6E, 0x74, 0x20, 0x61, 0x74, 0x20, 0x68, 0x74, 0x74, 0x70,
                0x73, 0x3A, 0x2F, 0x2F, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2E,
                0x6F, 0x72, 0x67, 0x2F, 0x64, 0x6F, 0x77, 0x6E, 0x6C, 0x6F, 0x61, 0x64,
                0x2F, 0x41, 0x64, 0x43, 0x6F, 0x75, 0x6E, 0x63, 0x69, 0x6C, 0x2D, 0x41,
                0x64, 0x6F, 0x70, 0x74, 0x69, 0x6F, 0x6E, 0x2D, 0x44, 0x61, 0x6E, 0x67,
                0x65, 0x72, 0x44, 0x61, 0x64, 0x2D, 0x33, 0x30, 0x5F, 0x43, 0x4C, 0x53,
                0x44, 0x2F, 0x41, 0x64, 0x43, 0x6F, 0x75, 0x6E, 0x63, 0x69, 0x6C, 0x2D,
                0x41, 0x64, 0x6F, 0x70, 0x74, 0x69, 0x6F, 0x6E, 0x2D, 0x44, 0x61, 0x6E,
                0x67, 0x65, 0x72, 0x44, 0x61, 0x64, 0x2D, 0x33, 0x30, 0x5F, 0x43, 0x4C,
                0x53, 0x44, 0x5F, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2E, 0x74,
                0x6F, 0x72, 0x72, 0x65, 0x6E, 0x74, 0x0A, 0x4E, 0x6F, 0x74, 0x65, 0x3A,
                0x20, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x61, 0x6C, 0x20, 0x75,
                0x73, 0x75, 0x61, 0x6C, 0x6C, 0x79, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69,
                0x72, 0x65, 0x73, 0x20, 0x61, 0x20, 0x63, 0x6C, 0x69, 0x65, 0x6E, 0x74,
                0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6F, 0x72,
                0x74, 0x73, 0x20, 0x77, 0x65, 0x62, 0x73, 0x65, 0x65, 0x64, 0x69, 0x6E,
                0x67, 0x20, 0x28, 0x47, 0x65, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x20,
                0x73, 0x74, 0x79, 0x6C, 0x65, 0x29, 0x2E, 0x0A, 0x4E, 0x6F, 0x74, 0x65,
                0x3A, 0x20, 0x6D, 0x61, 0x6E, 0x79, 0x20, 0x49, 0x6E, 0x74, 0x65, 0x72,
                0x6E, 0x65, 0x74, 0x20, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x20,
                0x74, 0x6F, 0x72, 0x72, 0x65, 0x6E, 0x74, 0x73, 0x20, 0x63, 0x6F, 0x6E,
                0x74, 0x61, 0x69, 0x6E, 0x20, 0x61, 0x20, 0x27, 0x70, 0x61, 0x64, 0x20,
                0x66, 0x69, 0x6C, 0x65, 0x27, 0x20, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
                0x6F, 0x72, 0x79, 0x2E, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x64, 0x69,
                0x72, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x79, 0x20, 0x61, 0x6E, 0x64, 0x20,
                0x74, 0x68, 0x65, 0x20, 0x66, 0x69, 0x6C, 0x65, 0x73, 0x20, 0x77, 0x69,
                0x74, 0x68, 0x69, 0x6E, 0x20, 0x69, 0x74, 0x20, 0x6D, 0x61, 0x79, 0x20,
                0x62, 0x65, 0x20, 0x65, 0x72, 0x61, 0x73, 0x65, 0x64, 0x20, 0x6F, 0x6E,
                0x63, 0x65, 0x20, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x61, 0x6C,
                0x20, 0x63, 0x6F, 0x6D, 0x70, 0x6C, 0x65, 0x74, 0x65, 0x73, 0x2E, 0x0A,
                0x4E, 0x6F, 0x74, 0x65, 0x3A, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x69,
                0x6C, 0x65, 0x20, 0x41, 0x64, 0x43, 0x6F, 0x75, 0x6E, 0x63, 0x69, 0x6C,
                0x2D, 0x41, 0x64, 0x6F, 0x70, 0x74, 0x69, 0x6F, 0x6E, 0x2D, 0x44, 0x61,
                0x6E, 0x67, 0x65, 0x72, 0x44, 0x61, 0x64, 0x2D, 0x33, 0x30, 0x5F, 0x43,
                0x4C, 0x53, 0x44, 0x5F, 0x6D, 0x65, 0x74, 0x61, 0x2E, 0x78, 0x6D, 0x6C,
                0x20, 0x63, 0x6F, 0x6E, 0x74, 0x61, 0x69, 0x6E, 0x73, 0x20, 0x6D, 0x65,
                0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x20, 0x61, 0x62, 0x6F, 0x75, 0x74,
                0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x74, 0x6F, 0x72, 0x72, 0x65, 0x6E,
                0x74, 0x27, 0x73, 0x20, 0x63, 0x6F, 0x6E, 0x74, 0x65, 0x6E, 0x74, 0x73,
                0x2E, 0x31, 0x30, 0x3A, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x20,
                0x62, 0x79, 0x31, 0x35, 0x3A, 0x69, 0x61, 0x5F, 0x6D, 0x61, 0x6B, 0x65,
                0x5F, 0x74, 0x6F, 0x72, 0x72, 0x65, 0x6E, 0x74, 0x31, 0x33, 0x3A, 0x63,
                0x72, 0x65, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x64, 0x61, 0x74, 0x65,
                0x69, 0x31, 0x34, 0x38, 0x32, 0x34, 0x34, 0x30, 0x37, 0x33, 0x34, 0x65,
                0x34, 0x3A, 0x69, 0x6E, 0x66, 0x6F, 0x64, 0x31, 0x31, 0x3A, 0x63, 0x6F,
                0x6C, 0x6C, 0x65, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x73, 0x6C, 0x34, 0x38,
                0x3A, 0x6F, 0x72, 0x67, 0x2E, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
                0x2E, 0x41, 0x64, 0x43, 0x6F, 0x75, 0x6E, 0x63, 0x69, 0x6C, 0x2D, 0x41,
                0x64, 0x6F, 0x70, 0x74, 0x69, 0x6F, 0x6E, 0x2D, 0x44, 0x61, 0x6E, 0x67,
                0x65, 0x72, 0x44, 0x61, 0x64, 0x2D, 0x33, 0x30, 0x5F, 0x43, 0x4C, 0x53,
                0x44, 0x65, 0x35, 0x3A, 0x66, 0x69, 0x6C, 0x65, 0x73, 0x6C, 0x64, 0x35,
                0x3A, 0x63, 0x72, 0x63, 0x33, 0x32, 0x38, 0x3A, 0x36, 0x32, 0x35, 0x65,
                0x35, 0x38, 0x66, 0x30, 0x36, 0x3A, 0x6C, 0x65, 0x6E, 0x67, 0x74, 0x68,
                0x69, 0x39, 0x32, 0x31, 0x36, 0x65, 0x33, 0x3A, 0x6D, 0x64, 0x35, 0x33,
                0x32, 0x3A, 0x34, 0x63, 0x31, 0x37, 0x39, 0x35, 0x64, 0x62, 0x34, 0x39,
                0x63, 0x35, 0x62, 0x63, 0x33, 0x32, 0x37, 0x36, 0x31, 0x37, 0x32, 0x30,
                0x30, 0x34, 0x61, 0x35, 0x30, 0x66, 0x63, 0x66, 0x34, 0x65, 0x35, 0x3A,
                0x6D, 0x74, 0x69, 0x6D, 0x65, 0x31, 0x30, 0x3A, 0x31, 0x34, 0x37, 0x31,
                0x32, 0x32, 0x34, 0x32, 0x37, 0x34, 0x34, 0x3A, 0x70, 0x61, 0x74, 0x68,
                0x6C, 0x34, 0x38, 0x3A, 0x41, 0x64, 0x43, 0x6F, 0x75, 0x6E, 0x63, 0x69,
                0x6C, 0x2D, 0x41, 0x64, 0x6F, 0x70, 0x74, 0x69, 0x6F, 0x6E, 0x2D, 0x44,
                0x61, 0x6E, 0x67, 0x65, 0x72, 0x44, 0x61, 0x64, 0x2D, 0x33, 0x30, 0x5F,
                0x43, 0x4C, 0x53, 0x44, 0x5F, 0x6D, 0x65, 0x74, 0x61, 0x2E, 0x73, 0x71,
                0x6C, 0x69, 0x74, 0x65, 0x65, 0x34, 0x3A, 0x73, 0x68, 0x61, 0x31, 0x34,
                0x30, 0x3A, 0x31, 0x36, 0x32, 0x66, 0x32, 0x38, 0x34, 0x61, 0x63, 0x65,
                0x61, 0x31, 0x36, 0x35, 0x34, 0x66, 0x62, 0x62, 0x63, 0x31, 0x65, 0x32,
                0x36, 0x33, 0x64, 0x62, 0x35, 0x31, 0x30, 0x35, 0x66, 0x37, 0x30, 0x34,
                0x31, 0x32, 0x34, 0x30, 0x37, 0x61, 0x65, 0x64, 0x35, 0x3A, 0x63, 0x72,
                0x63, 0x33, 0x32, 0x38, 0x3A, 0x35, 0x31, 0x38, 0x39, 0x61, 0x39, 0x62,
                0x61, 0x36, 0x3A, 0x6C, 0x65, 0x6E, 0x67, 0x74, 0x68, 0x69, 0x31, 0x32,
                0x36, 0x39, 0x65, 0x33, 0x3A, 0x6D, 0x64, 0x35, 0x33, 0x32, 0x3A, 0x63,
                0x35, 0x62, 0x37, 0x61, 0x61, 0x62, 0x33, 0x31, 0x34, 0x32, 0x35, 0x62,
                0x38, 0x66, 0x30, 0x63, 0x32, 0x39, 0x35, 0x31, 0x65, 0x65, 0x33, 0x33,
                0x36, 0x66, 0x35, 0x30, 0x61, 0x33, 0x32, 0x35, 0x3A, 0x6D, 0x74, 0x69,
                0x6D, 0x65, 0x31, 0x30, 0x3A, 0x31, 0x34, 0x38, 0x32, 0x34, 0x34, 0x30,
                0x37, 0x33, 0x32, 0x34, 0x3A, 0x70, 0x61, 0x74, 0x68, 0x6C, 0x34, 0x35,
                0x3A, 0x41, 0x64, 0x43, 0x6F, 0x75, 0x6E, 0x63, 0x69, 0x6C, 0x2D, 0x41,
                0x64, 0x6F, 0x70, 0x74, 0x69, 0x6F, 0x6E, 0x2D, 0x44, 0x61, 0x6E, 0x67,
                0x65, 0x72, 0x44, 0x61, 0x64, 0x2D, 0x33, 0x30, 0x5F, 0x43, 0x4C, 0x53,
                0x44, 0x5F, 0x6D, 0x65, 0x74, 0x61, 0x2E, 0x78, 0x6D, 0x6C, 0x65, 0x34,
                0x3A, 0x73, 0x68, 0x61, 0x31, 0x34, 0x30, 0x3A, 0x36, 0x37, 0x64, 0x31,
                0x65, 0x34, 0x31, 0x61, 0x66, 0x66, 0x63, 0x65, 0x62, 0x39, 0x38, 0x32,
                0x64, 0x33, 0x32, 0x66, 0x36, 0x38, 0x33, 0x64, 0x39, 0x35, 0x33, 0x33,
                0x33, 0x61, 0x33, 0x35, 0x66, 0x36, 0x33, 0x37, 0x31, 0x63, 0x65, 0x64,
                0x65, 0x65, 0x34, 0x3A, 0x6E, 0x61, 0x6D, 0x65, 0x33, 0x36, 0x3A, 0x41,
                0x64, 0x43, 0x6F, 0x75, 0x6E, 0x63, 0x69, 0x6C, 0x2D, 0x41, 0x64, 0x6F,
                0x70, 0x74, 0x69, 0x6F, 0x6E, 0x2D, 0x44, 0x61, 0x6E, 0x67, 0x65, 0x72,
                0x44, 0x61, 0x64, 0x2D, 0x33, 0x30, 0x5F, 0x43, 0x4C, 0x53, 0x44, 0x31,
                0x32, 0x3A, 0x70, 0x69, 0x65, 0x63, 0x65, 0x20, 0x6C, 0x65, 0x6E, 0x67,
                0x74, 0x68, 0x69, 0x35, 0x32, 0x34, 0x32, 0x38, 0x38, 0x65, 0x36, 0x3A,
                0x70, 0x69, 0x65, 0x63, 0x65, 0x73, 0x32, 0x30, 0x3A, 0x83, 0x72, 0x53,
                0x2D, 0x36, 0x11, 0x50, 0xA8, 0x68, 0x52, 0x0E, 0xC8, 0x2E, 0x0F, 0x0C,
                0x1C, 0x6B, 0xE2, 0x46, 0xEC, 0x65, 0x36, 0x3A, 0x6C, 0x6F, 0x63, 0x61,
                0x6C, 0x65, 0x32, 0x3A, 0x65, 0x6E, 0x35, 0x3A, 0x74, 0x69, 0x74, 0x6C,
                0x65, 0x33, 0x36, 0x3A, 0x41, 0x64, 0x43, 0x6F, 0x75, 0x6E, 0x63, 0x69,
                0x6C, 0x2D, 0x41, 0x64, 0x6F, 0x70, 0x74, 0x69, 0x6F, 0x6E, 0x2D, 0x44,
                0x61, 0x6E, 0x67, 0x65, 0x72, 0x44, 0x61, 0x64, 0x2D, 0x33, 0x30, 0x5F,
                0x43, 0x4C, 0x53, 0x44, 0x38, 0x3A, 0x75, 0x72, 0x6C, 0x2D, 0x6C, 0x69,
                0x73, 0x74, 0x6C, 0x32, 0x39, 0x3A, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3A,
                0x2F, 0x2F, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2E, 0x6F, 0x72,
                0x67, 0x2F, 0x64, 0x6F, 0x77, 0x6E, 0x6C, 0x6F, 0x61, 0x64, 0x2F, 0x34,
                0x30, 0x3A, 0x68, 0x74, 0x74, 0x70, 0x3A, 0x2F, 0x2F, 0x69, 0x61, 0x36,
                0x30, 0x31, 0x32, 0x30, 0x31, 0x2E, 0x75, 0x73, 0x2E, 0x61, 0x72, 0x63,
                0x68, 0x69, 0x76, 0x65, 0x2E, 0x6F, 0x72, 0x67, 0x2F, 0x32, 0x30, 0x2F,
                0x69, 0x74, 0x65, 0x6D, 0x73, 0x2F, 0x34, 0x30, 0x3A, 0x68, 0x74, 0x74,
                0x70, 0x3A, 0x2F, 0x2F, 0x69, 0x61, 0x38, 0x30, 0x31, 0x32, 0x30, 0x31,
                0x2E, 0x75, 0x73, 0x2E, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2E,
                0x6F, 0x72, 0x67, 0x2F, 0x32, 0x30, 0x2F, 0x69, 0x74, 0x65, 0x6D, 0x73,
                0x2F, 0x65, 0x65
            };

            var reader = new BencodeReader(rawData);
            var item = reader.Read() as BencodeDictionary;

            var rootKeys = new List<string> {
                "announce", "announce-list", "comment",
                "created by", "creation date", "info",
                "locale", "title", "url-list"
            };

            // TODO: Test more included values
            Assert.NotNull(item);
            Assert.Equal(9, item.Count);
            // ReSharper disable once ReturnValueOfPureMethodIsNotUsed
            Assert.All(item, kvp => rootKeys.Contains(kvp.Key));
        }

        [Fact]
        public void Read_InvalidSimpleDictionary() {

            const string data = "di42e5:valuee";

            var reader = new BencodeReader(Encoding.ASCII.GetBytes(data));

            Assert.Throws(typeof(InvalidDataException), () => reader.Read());
        }

        [Fact]
        public void Read_NegativeBytestringLength() {
            // Byte string length can be 0, but not negative
            const string data = "-5:bytestr";

            var reader = new BencodeReader(Encoding.ASCII.GetBytes(data));

            Assert.Throws(typeof(InvalidDataException), () => reader.Read());
        }

        [Fact]
        public void Read_ZeroBytestringLength() {
            const string data = "0:";

            var reader = new BencodeReader(Encoding.ASCII.GetBytes(data));
            var str = reader.Read() as BencodeByteString;

            Assert.Equal(string.Empty, str);
        }

        [Fact]
        public void Read_EmptyList() {
            const string data = "le";

            var reader = new BencodeReader(Encoding.ASCII.GetBytes(data));
            var list = reader.Read() as BencodeList;

            Assert.NotNull(list);
            Assert.Equal(0, list.Count);
        }

        [Fact]
        public void Read_EmptyDictionary() {
            const string data = "de";

            var reader = new BencodeReader(Encoding.ASCII.GetBytes(data));
            var dict = reader.Read() as BencodeDictionary;

            Assert.NotNull(dict);
            Assert.Equal(0, dict.Count);
        }
    }
}

